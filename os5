#include <stdio.h>
#include <stdbool.h>
#define MAX_PROCESSES 10
#define MAX_RESOURCES 10
int allocation[MAX_PROCESSES][MAX_RESOURCES];
int max[MAX_PROCESSES][MAX_RESOURCES];
int need[MAX_PROCESSES][MAX_RESOURCES];
int available[MAX_RESOURCES];
int m, n;
void calculateNeedMatrix();
bool checkSafeState(int process, int request[]);
bool requestResource(int process, int request[]);
int main() {
printf("Enter the number of processes: ");
scanf("%d", &m);
printf("Enter the number of resource types: ");
scanf("%d", &n);
printf("Enter the number of available instances for each resource type:\n");
for (int i = 0; i < n; i++) {
printf("Resource type %d: ", i + 1);
scanf("%d", &available[i]);
}
printf("Enter the allocation matrix:\n");
for (int i = 0; i < m; i++) {
printf("Process %d: ", i + 1);
for (int j = 0; j < n; j++) {
scanf("%d", &allocation[i][j]);
}
}
printf("Enter the maximum requirement matrix:\n");
for (int i = 0; i < m; i++) {
printf("Process %d: ", i + 1);
for (int j = 0; j < n; j++) {
scanf("%d", &max[i][j]);
}
}
calculateNeedMatrix();
printf("\nNeed Matrix:\n");
for (int i = 0; i < m; i++) {
printf("P%d: ", i + 1);
for (int j = 0; j < n; j++) {
printf("%d ", need[i][j]);
}
printf("\n");
}
int process, request[MAX_RESOURCES];
printf("\nEnter the process number (1-%d) and the resource request:\n", m);
scanf("%d", &process);
for (int i = 0; i < n; i++) {
scanf("%d", &request[i]);
}
if (requestResource(process - 1, request)) {
printf("Request can be granted immediately.\n");
} else {
printf("Request cannot be granted immediately.\n");
}
return 0;
}
void calculateNeedMatrix() {
for (int i = 0; i < m; i++) {
for (int j = 0; j < n; j++) {
need[i][j] = max[i][j] - allocation[i][j];
}
}
}
bool checkSafeState(int process, int request[]) {
return true;
}
bool requestResource(int process, int request[]) {
for (int i = 0; i < n; i++) {
if (request[i] > need[process][i]) {
return false;
}
}
for (int i = 0; i < n; i++) {
if (request[i] > available[i]) {
return false;
}
}
for (int i = 0; i < n; i++) {
allocation[process][i] += request[i];
available[i] -= request[i];
need[process][i] -= request[i];
}
if (checkSafeState(process, request)) {
return true;
} else {
for (int i = 0; i < n; i++) {
allocation[process][i] -= request[i];
available[i] += request[i];
need[process][i] += request[i];
}
return false;
}
}


2


#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
#define ARRAY_SIZE 1000
int main(int argc, char **argv) {
int rank, size;
int local_max = 0;
int global_max = 0;
int local_array[ARRAY_SIZE];
MPI_Init(&argc, &argv);
MPI_Comm_rank(MPI_COMM_WORLD, &rank);
MPI_Comm_size(MPI_COMM_WORLD, &size);
srand(rank);
for (int i = 0; i < ARRAY_SIZE; i++) {
local_array[i] = rand() % 1000;
if (local_array[i] > local_max) {
local_max = local_array[i];
}
}
printf("Process %d local max: %d\n", rank, local_max);
MPI_Reduce(&local_max, &global_max, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);
if (rank == 0) {
printf("Global max: %d\n", global_max);
}
MPI_Finalize();
return 0;
}
